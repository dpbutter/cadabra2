{
	"cell_id": 6019221673666211598,
	"cells": [
		{
			"cell_id": 3141052395239476853,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11719283590375328817,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\section*{Using SymPy on Cadabra expressions}\n\nWhile Cadabra contains a large number of function for expression manipulation, there are many things for which it does not attempt to re-invent the wheel, and calls into SymPy instead. If you want to write functions which manipulate Cadabra expressions and call SymPy functionality on them yourself, you need to know how to export expressions to SymPy form, and read them back once it has done processing. This is somewhat non-trivial, because Cadabra's notation allows for much more general expressions than SymPy. Think of \\LaTeX{} expressions, super- and sub-scripts but also objects which depend implicitly on other variables. These things all need converting to something which SymPy can handle, and converting back once SymPy has produced a result."
				}
			],
			"hidden": true,
			"source": "\\section*{Using SymPy on Cadabra expressions}\n\nWhile Cadabra contains a large number of function for expression manipulation, there are many things for which it does not attempt to re-invent the wheel, and calls into SymPy instead. If you want to write functions which manipulate Cadabra expressions and call SymPy functionality on them yourself, you need to know how to export expressions to SymPy form, and read them back once it has done processing. This is somewhat non-trivial, because Cadabra's notation allows for much more general expressions than SymPy. Think of \\LaTeX{} expressions, super- and sub-scripts but also objects which depend implicitly on other variables. These things all need converting to something which SymPy can handle, and converting back once SymPy has produced a result."
		},
		{
			"cell_id": 10363222040320991365,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 16021072591756643213,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "The main object to deal with this conversion is \\verb|SympyBridge|. This object takes the expression you want to share with SymPy. Let us start with a non-trivial Cadabra expression,"
				}
			],
			"hidden": true,
			"source": "The main object to deal with this conversion is \\verb|SympyBridge|. This object takes the expression you want to share with SymPy. Let us start with a non-trivial Cadabra expression,"
		},
		{
			"cell_id": 14640557008397293206,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 17642380777219746400,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property PartialDerivative attached to~}\\backslash\\texttt{partial}\\{\\#\\}.\\end{dmath*}"
				},
				{
					"cell_id": 11311532150071334257,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Coordinate attached to~}t.\\end{dmath*}"
				},
				{
					"cell_id": 10285511277438191052,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Depends attached to~}x.\\end{dmath*}"
				}
			],
			"source": "\\partial{#}::PartialDerivative;\nt::Coordinate;\nx::Depends(t);"
		},
		{
			"cell_id": 2257448352953451952,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 11641289790669342633,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 6829148980251860903,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "(\\sin(x))**2 + (\\cos(x))**2 + \\partial_{t}(x)"
						}
					],
					"source": "\\begin{dmath*}{}{\\left(\\sin{x}\\right)}^{2\\,}\\discretionary{}{}{}+{\\left(\\cos{x}\\right)}^{2\\,}\\discretionary{}{}{}+\\partial_{t}{x}\\end{dmath*}"
				}
			],
			"source": "ex:= \\sin(x)**2 + \\cos(x)**2 + \\partial_{t}{x};"
		},
		{
			"cell_id": 811930716112812923,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 4981305692711169774,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "The above expression contains \\verb|\\sin| and \\verb|\\cos| (which SymPy does not understand) and it also contains a variable $x$ which implicitly depends on $t$ (the dependence is not shown in the output). In order to be able to feed this into SymPy, and get it back later, we create a \\verb|SympyBridge| object, passing it the expression:"
				}
			],
			"hidden": true,
			"source": "The above expression contains \\verb|\\sin| and \\verb|\\cos| (which SymPy does not understand) and it also contains a variable $x$ which implicitly depends on $t$ (the dependence is not shown in the output). In order to be able to feed this into SymPy, and get it back later, we create a \\verb|SympyBridge| object, passing it the expression:"
		},
		{
			"cell_id": 14171341419325683178,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 16351361485273877233,
					"cell_origin": "server",
					"cell_type": "verbatim",
					"source": "\\begin{verbatim}<cadabra2.SympyBridge object at 0xe74381340c70>\\end{verbatim}"
				}
			],
			"source": "sb = SympyBridge(ex);"
		},
		{
			"cell_id": 12417034613577478302,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 12120598920304089059,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "In order to retrieve the SymPy object, use the \\verb|to_sympy()| function, "
				}
			],
			"hidden": true,
			"source": "In order to retrieve the SymPy object, use the \\verb|to_sympy()| function, "
		},
		{
			"cell_id": 7460301723421844097,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 12898408199579522338,
					"cell_origin": "server",
					"cell_type": "output",
					"source": "\\begin{verbatim}<class 'sympy.core.add.Add'>\n\\end{verbatim}"
				}
			],
			"source": "ex_sympy = sb.to_sympy()\nprint(type(ex_sympy))"
		},
		{
			"cell_id": 14363314488499443831,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 17654699939173108028,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "As you can see, the expression is now a SymPy object. If you print it, you will note that Cadabra has converted the \\LaTeX{} symbols \\verb|\\sin| and \\verb|\\cos| to something SymPy understands, and it has also written out the implicit dependence on the $t$ variable,"
				}
			],
			"hidden": true,
			"source": "As you can see, the expression is now a SymPy object. If you print it, you will note that Cadabra has converted the \\LaTeX{} symbols \\verb|\\sin| and \\verb|\\cos| to something SymPy understands, and it has also written out the implicit dependence on the $t$ variable,"
		},
		{
			"cell_id": 12438384282863570392,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 9598964413090421073,
					"cell_origin": "server",
					"cell_type": "output",
					"source": "\\begin{verbatim}sin(x(t))**2 + cos(x(t))**2 + Derivative(x(t), t)\n\\end{verbatim}"
				}
			],
			"source": "print(ex_sympy)"
		},
		{
			"cell_id": 3314936080047954075,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 164194584640500209,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "You can now manipulate this expression as you want, using standard SymPy functionality. Let's simplify this,"
				}
			],
			"hidden": true,
			"source": "You can now manipulate this expression as you want, using standard SymPy functionality. Let's simplify this,"
		},
		{
			"cell_id": 7089643061312412743,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 11685820618493173482,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\frac{d}{d t} x{\\left(t \\right)} + 1\\end{dmath*}"
				},
				{
					"cell_id": 546058567743717626,
					"cell_origin": "server",
					"cell_type": "output",
					"source": "\\begin{verbatim}<class 'sympy.core.add.Add'>\n\\end{verbatim}"
				}
			],
			"source": "res = sympy.simplify( ex_sympy );\nprint(type(res))"
		},
		{
			"cell_id": 6370470393263816966,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 2806557392660395011,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "This is of course still a SymPy expression. We can pull it back into Cadabra by using the \\verb|SympyBridge| again,"
				}
			],
			"hidden": true,
			"source": "This is of course still a SymPy expression. We can pull it back into Cadabra by using the \\verb|SympyBridge| again,"
		},
		{
			"cell_id": 1133881024765925592,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 11794754683863187961,
					"cell_origin": "server",
					"cell_type": "verbatim",
					"source": "\\begin{verbatim}None\\end{verbatim}"
				}
			],
			"source": "sb.from_sympy( res );"
		},
		{
			"cell_id": 17254762459033388476,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 13664737385979361090,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "This does not return a new expression (the return value is \\verb|None|), but instead puts the SymPy expression back into the original Cadabra expression that we started with when we constructed the bridge; here that is \\verb|ex|. Indeed,"
				}
			],
			"hidden": true,
			"source": "This does not return a new expression (the return value is \\verb|None|), but instead puts the SymPy expression back into the original Cadabra expression that we started with when we constructed the bridge; here that is \\verb|ex|. Indeed,"
		},
		{
			"cell_id": 17271004422718666216,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 16101485724532254709,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 8801360286293087809,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\partial_{t}(x) + 1"
						}
					],
					"source": "\\begin{dmath*}{}\\partial_{t}{x}\\discretionary{}{}{}+1\\end{dmath*}"
				}
			],
			"source": "ex;"
		},
		{
			"cell_id": 13344444686216197143,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 16158702197574445152,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "Note how this has nicely removed the explicit dependence on $t$ and turned it back into an implicit notation, writing just $x$ and not $x(t)$."
				}
			],
			"hidden": true,
			"source": "Note how this has nicely removed the explicit dependence on $t$ and turned it back into an implicit notation, writing just $x$ and not $x(t)$."
		},
		{
			"cell_id": 11664900633694074895,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"flags": {
		"hide_input_cells": false
	},
	"version": 1.0
}
