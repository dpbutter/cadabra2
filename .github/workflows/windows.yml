# Create Windows installer on a github push or release event
# (upload to the release assets in the latter case).

name: Windows 11

on: [push]

#on:
#  release:
#    types: [created]

defaults:
    run:
      shell: msys2 {0}

jobs:
  msys2-ucrt64:
    strategy:
      matrix:
        include:
          - os: windows-2022
            name: x86_64
            display-name: "Windows 11 x86_64"
            msystem: ucrt64
            midfix: ucrt-x86_64
          - os: windows-11-arm
            name: arm64
            msystem: clangarm64
            midfix: clang-aarch64
            display-name: "Windows 11 arm64"
    runs-on: ${{ matrix.os }}
    name: Windows build
    defaults:
      run:
        shell: msys2 {0}

    steps:
    - name: Install WiX v4/v5 Tool
      run: |
        dotnet tool install --tool-path c:\WiX\bin wix --version 5.0.2
        c:\WiX\bin\wix extension add --global WixToolset.UI.wixext/5.0.2
      shell: pwsh

    - name: Add WiX toolkit to PATH
      shell: bash
      run: |
        echo "WiX installed at ${WIX}, hopefully..."
        echo "Listing C:/WiX/bin"
        ls "C:/WiX/bin"
        echo "Listing Program Files (x86):"
        ls "C:/Program Files (x86)/"
        echo "Listing Program Files:"        
        ls "C:/Program Files/"
        echo "${WIX}bin" >> $GITHUB_PATH

    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        update: true
        install: >-
          curl
          git
          mingw-w64-${{ matrix.midfix }}-gcc
          mingw-w64-${{ matrix.midfix }}-python
          mingw-w64-${{ matrix.midfix }}-gtkmm3
          mingw-w64-${{ matrix.midfix }}-boost    
          mingw-w64-${{ matrix.midfix }}-sqlite3
          mingw-w64-${{ matrix.midfix }}-cmake
          mingw-w64-${{ matrix.midfix }}-python-matplotlib
          mingw-w64-${{ matrix.midfix }}-python-sympy
          mingw-w64-${{ matrix.midfix }}-github-cli
          
    - name: Authenticate GitHub CLI
      run: gh auth setup-git
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
    - uses: actions/checkout@master
      name: Checkout source
      
    - name: Build
      run: |
        mkdir build
        cd build
        # Turn off searching Python in the registry, as that contains the
        # windows Python which is not the MSYS python that we want to use.
        cmake -DPython_FIND_REGISTRY=NEVER ..
        ninja
        ninja install
        cpack

    - name: Upload cmake_install.cmake file
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cmake_install-${{ matrix.name }}.cmake
        path: build/cmake_install.cmake
        retention-days: 2

    - name: Upload frontend/cmake_install.cmake file
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-cmake_install-${{ matrix.name }}.cmake
        path: build/frontend/cmake_install.cmake
        retention-days: 2
        
    - name: Upload frontend/gtkmm/cmake_install.cmake file
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-gtkmm-cmake_install-${{ matrix.name }}.cmake
        path: build/frontend/gtkmm/cmake_install.cmake
        retention-days: 2
        
    - name: Upload WiX log file
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: wix-${{ matrix.name }}.log
        path: build/_CPack_Packages/win64/WIX/wix.log
        retention-days: 2

    - name: Set version variables from output of cmake
      run: |
        VER=$(cat build/VERSION)
        echo "VERSION=$VER" >> $GITHUB_ENV
        GITVER=$(cat build/GIT_TAG_VERSION)
        echo "GIT_TAG_VERSION=$GITVER" >> $GITHUB_ENV

    - name: Upload installer as build artifact
      uses: actions/upload-artifact@v4
      with:
        name: cadabra2-windows-${{ matrix.name }}.msi
        path: build/cadabra2-${{ env.VERSION }}-win64.msi
        retention-days: 2

    - name: Upload release assets
      if:   github.event_name == 'release'
      run: |
        mv build/cadabra2-${{ env.VERSION }}-win64.msi build/cadabra2-${{ env.GIT_TAG_VERSION }}-windows-${{ matrix.name }}.msi
        gh release upload "${{ env.GIT_TAG_VERSION }}" build/cadabra2-${{ env.GIT_TAG_VERSION }}-windows-${{ matrix.name }}.msi --clobber
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    needs: msys2-ucrt64
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-2022
            name: x86_64
            display-name: "Windows 11 x86_64"
          - os: windows-11-arm
            name: arm64
            display-name: "Windows 11 arm64"
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Download installer
      uses: actions/download-artifact@v4
      with:
        name: cadabra2-windows-${{ matrix.name }}.msi

    - name: Install silently
      shell: pwsh
      run: |
        dir
        $installer = Get-ChildItem -Filter "cadabra*.msi" | Select-Object -First 1 -ExpandProperty Name
        if (-not $installer) {
            Write-Error "No installer found"
            exit 1
        }
        $installerPath = (Get-Item -Path ".\$installer").FullName        
        Write-Host "Installing $installerPath"
        Start-Process -FilePath "msiexec" -ArgumentList "/i", "$installerPath", "/qn", "/l*v", "install.log" -Wait
        Write-Host "Installer finished"

    - name: Upload installation log
      uses: actions/upload-artifact@v4
      with:
        name: install-${{ matrix.os }}.log
        path: install.log

    - name: Check installation location
      shell: cmd
      run: |
        echo "Main folder:"
        dir "C:\Program Files\Cadabra" 
        
    - name: Start GUI and take screenshot
      shell: pwsh
      run: |
        # Attempt to start the notebook
        if (-not (Test-Path "C:\Program Files\Cadabra\cadabra2-gtk.exe")) {
        Write-Host "Executable not found"
        exit 1
        }
        $process = Start-Process "C:\Program Files\Cadabra\cadabra2-gtk.exe" -ArgumentList "-n", "Examples\schwarzschild.cnb" -WorkingDirectory "C:\Program Files\Cadabra" -PassThru
        Start-Sleep -Seconds 120

        # Take screenshot
        Add-Type -AssemblyName System.Windows.Forms
        Add-Type -AssemblyName System.Drawing
        
        $screen = [System.Windows.Forms.Screen]::PrimaryScreen.Bounds
        $bitmap = New-Object System.Drawing.Bitmap($screen.Width, $screen.Height)
        $graphics = [System.Drawing.Graphics]::FromImage($bitmap)
        $graphics.CopyFromScreen($screen.Location, [System.Drawing.Point]::Empty, $screen.Size)
        $bitmap.Save("screenshot.png")
        $graphics.Dispose()
        $bitmap.Dispose()

        # Cleanup
        Stop-Process -Id $process.Id -Force
      
    - name: Upload cadabra_log.txt
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cadabra_log-${{ matrix.os }}.txt
        path: C:\Windows\Temp\cadabra_log.txt

    - name: Upload screenshot
      uses: actions/upload-artifact@v4
      with:
        name: app-screenshot-${{ matrix.os }}
        path: screenshot.png
        
