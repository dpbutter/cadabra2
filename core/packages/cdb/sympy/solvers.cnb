{
	"cell_id": 10165666682519261461,
	"cells": [
		{
			"cell_id": 15790243487325388783,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 117344227491248367,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\package{cdb.sympy.solvers}{Access to Sympy solver functions.}\n\nThese are simple wrappers to make Sympy solvers available from Cadabra, using\nCadabra expressions. There are some differences in the input and output of these\nfunctions with respect to Sympy, mainly to make things more consistent."
				}
			],
			"hidden": true,
			"source": "\\package{cdb.sympy.solvers}{Access to Sympy solver functions.}\n\nThese are simple wrappers to make Sympy solvers available from Cadabra, using\nCadabra expressions. There are some differences in the input and output of these\nfunctions with respect to Sympy, mainly to make things more consistent."
		},
		{
			"cell_id": 18194547037908567614,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11537546742094706282,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{dsolve(Ex: equation(s), Ex: function(s)) -> Ex}{Solve (system of) ordinary differential equation(s).}\n\nGiven a single differential equation or a system of differential equations, return the solution. The second argument\nis optional; if not given, \\algo{dsolve} will try to figure out the unknown(s). Functions can\nhave implicit dependence on the independent variable, as in the example below, where $f$ depends on $x$\nbut that dependence is not spelled out again explicitly in the equation.\n\nNote that since this is backed by \\verb|sympy.dsolve|, and the latter is rather buggy for systems\nof differential equations, do not expect miracles in that case."
				}
			],
			"hidden": true,
			"source": "\\algorithm{dsolve(Ex: equation(s), Ex: function(s)) -> Ex}{Solve (system of) ordinary differential equation(s).}\n\nGiven a single differential equation or a system of differential equations, return the solution. The second argument\nis optional; if not given, \\algo{dsolve} will try to figure out the unknown(s). Functions can\nhave implicit dependence on the independent variable, as in the example below, where $f$ depends on $x$\nbut that dependence is not spelled out again explicitly in the equation.\n\nNote that since this is backed by \\verb|sympy.dsolve|, and the latter is rather buggy for systems\nof differential equations, do not expect miracles in that case."
		},
		{
			"cell_id": 8589228160107610297,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "import sympy"
		},
		{
			"cell_id": 11180798987284830538,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def dsolve(ex, obj=None):\n   # FIXME: If ex is a list, convert to an Ex when it is pulled\n   # into an expression like below!\n   ret = $@(ex)$\n   sb = SympyBridge(ret)\n   if obj is None:\n      sb.from_sympy( sympy.dsolve( sb.to_sympy() ) )\n   else:\n      sbo = SympyBridge(obj)\n      sb.from_sympy( sympy.dsolve( sb.to_sympy(), sbo.to_sympy() ) )\n   return ret"
		},
		{
			"cell_id": 497397197071890198,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 11971036040051999520,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Coordinate attached to~}x.\\end{dmath*}"
				},
				{
					"cell_id": 5099464181795568820,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property Depends attached to~}\\left[f, \\discretionary{}{}{}g\\right].\\end{dmath*}"
				},
				{
					"cell_id": 2854117650171105912,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"source": "\\begin{dmath*}{}\\text{Property PartialDerivative attached to~}\\backslash\\texttt{partial}\\{\\#\\}.\\end{dmath*}"
				},
				{
					"cell_id": 13636765245901389818,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 8535022108651334760,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\partial_{x x}(f) + \\partial_{x}(f) = \\sin(x)"
						}
					],
					"source": "\\begin{dmath*}{}\\partial_{x x}{f}\\discretionary{}{}{}+\\partial_{x}{f} = \\sin{x}\\end{dmath*}"
				},
				{
					"cell_id": 17317240651681688211,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 5271676865441383344,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "f = C1 + \\exp(-x) C2 -  1/2 \\sin(x) -  1/2 \\cos(x)"
						}
					],
					"source": "\\begin{dmath*}{}f = {C_{1}}\\discretionary{}{}{}+\\exp\\left(-\\,x\\right) {C_{2}}\\discretionary{}{}{} - \\frac{1}{2}\\,\\sin{x}\\discretionary{}{}{} - \\frac{1}{2}\\,\\cos{x}\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "x::Coordinate;\n{f,g}::Depends(x);\n\\partial{#}::PartialDerivative;\nex:= \\partial_{x x}{f} + \\partial_{x}{f} = \\sin(x);\nsol=dsolve(ex, $f$);"
		},
		{
			"cell_id": 4985987136595864320,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 4568106667759646646,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 13426020657821151832,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\partial_{x x}((C1 + \\exp(-x) C2 -  1/2 \\sin(x) -  1/2 \\cos(x))) + \\partial_{x}((C1 + \\exp(-x) C2 -  1/2 \\sin(x) -  1/2 \\cos(x))) = \\sin(x)"
						}
					],
					"source": "\\begin{dmath*}{}\\partial_{x x}\\left({C_{1}}\\discretionary{}{}{}+\\exp\\left(-\\,x\\right) {C_{2}}\\discretionary{}{}{} - \\frac{1}{2}\\,\\sin{x}\\discretionary{}{}{} - \\frac{1}{2}\\,\\cos{x}\\right)\\discretionary{}{}{}+\\partial_{x}\\left({C_{1}}\\discretionary{}{}{}+\\exp\\left(-\\,x\\right) {C_{2}}\\discretionary{}{}{} - \\frac{1}{2}\\,\\sin{x}\\discretionary{}{}{} - \\frac{1}{2}\\,\\cos{x}\\right) = \\sin{x}\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "substitute(ex, sol);"
		},
		{
			"cell_id": 6058106723051096452,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 17422987312986399839,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 14317938847461642013,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\sin(x) = \\sin(x)"
						}
					],
					"source": "\\begin{dmath*}{}\\sin{x} = \\sin{x}\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "map_sympy(ex, \"simplify\");"
		},
		{
			"cell_id": 9955417298432415316,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 4251291386534782263,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 18082648744036411038,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{\\partial_{x}(f) = f g \\sin(x), \\partial_{x}(g) = (g)**2 \\sin(x)}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\partial_{x}{f} = f g \\sin{x}, \\discretionary{}{}{}\\partial_{x}{g} = {g}^{2\\,} \\sin{x}\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "st:= { \\partial_{x}{f} = f g \\sin(x), \\partial_{x}{g} = g**2 \\sin(x) };"
		},
		{
			"cell_id": 17502079193295596278,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 8586148297137285798,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 18203959768896801723,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{f = -\\exp(C1) (\\exp(C1) C2-\\cos(x))**(-1), g = -(C1-\\cos(x))**(-1)}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[f = -\\,\\exp\\left({C_{1}}\\right) {\\left(\\exp\\left({C_{1}}\\right) {C_{2}}\\discretionary{}{}{}-\\,\\cos{x}\\right)}^{-\\,1}, \\discretionary{}{}{}g = -\\,{\\left({C_{1}}\\discretionary{}{}{}-\\,\\cos{x}\\right)}^{-\\,1}\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "dsolve(st);"
		},
		{
			"cell_id": 11970634058257249996,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 10103860588900185699,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{linsolve(Ex: equations, Ex: objects) -> Ex}{Solve a linear system for unknowns.}\n\nGiven an expression containing one or more linear equations, and an second expression containing\nthe variables to solve for, determine the solutions. Returns list with one element, which is a\nlist of substitution rules for the variables that have been solved for (the output is a nested\nlist to ensure that it is similar to the output of \\algo{nonlinsolve}, which can return more than one solution set)."
				}
			],
			"hidden": true,
			"source": "\\algorithm{linsolve(Ex: equations, Ex: objects) -> Ex}{Solve a linear system for unknowns.}\n\nGiven an expression containing one or more linear equations, and an second expression containing\nthe variables to solve for, determine the solutions. Returns list with one element, which is a\nlist of substitution rules for the variables that have been solved for (the output is a nested\nlist to ensure that it is similar to the output of \\algo{nonlinsolve}, which can return more than one solution set)."
		},
		{
			"cell_id": 17888835071658719091,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def linsolve(exs, objs):\n   ret = $@(exs)$\n   obl = $@(objs)$\n   if ret.head()!=r\"\\comma\":\n      ret = $\\comma{ @(ret) }$\n   if obl.head()!=r\"\\comma\":\n      obl = $\\comma{ @(obl) }$\n   sb = SympyBridge(ret)\n   sb.from_sympy( sympy.linsolve( sb.to_sympy(), obl._sympy_()) )\n   ret;\n   nret = $\\comma{}$\n   for i in range(len(ret[0])):\n      tmpv=obl[i]\n      tmps=ret[0][i]\n      nret.top().append_child($ @(tmpv) -> @(tmps) $)\n   ret=$ \\comma{ @(nret) }$\n   return ret"
		},
		{
			"cell_id": 3825114940942753284,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 13367518239337213466,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 17081387208087638311,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "x + a = 0"
						}
					],
					"source": "\\begin{dmath*}{}x\\discretionary{}{}{}+a = 0\\,\\end{dmath*}"
				},
				{
					"cell_id": 7109351760917556632,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 1720716397702529034,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{-a}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[-\\,a\\right]\\right]\\end{dmath*}"
				},
				{
					"cell_id": 12396475032184992506,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 14731485227261171027,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> -a}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow -\\,a\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:=  x + a = 0;\nsol=linsolve(ex, $x$);"
		},
		{
			"cell_id": 6176825001521917917,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 198037658084628295,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 16575753805642399862,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "0 = 0"
						}
					],
					"source": "\\begin{dmath*}{}0\\, = 0\\,\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "substitute(ex, sol[0]);"
		},
		{
			"cell_id": 9426120572392451421,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 3818775303993614347,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 5337358205483137739,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{x + 1 = 0, y +  4/3 x + 2a = 0}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[x\\discretionary{}{}{}+1 = 0\\,, \\discretionary{}{}{}y\\discretionary{}{}{}+\\frac{4}{3}\\,x\\discretionary{}{}{}+2\\,a = 0\\,\\right]\\end{dmath*}"
				},
				{
					"cell_id": 11902778502025647670,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 17095935178189177560,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{-1,  4/3 -2a}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[-\\,1, \\discretionary{}{}{}\\frac{4}{3}\\,\\discretionary{}{}{}-2\\,a\\right]\\right]\\end{dmath*}"
				},
				{
					"cell_id": 1794082835830977518,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 16164563890887887189,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> -1, y ->  4/3 -2a}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow -\\,1, \\discretionary{}{}{}y \\rightarrow \\frac{4}{3}\\,\\discretionary{}{}{}-2\\,a\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:= x + 1 = 0, y + 4/3 x + 2 a = 0;\nsol=linsolve(ex, $x,y$);"
		},
		{
			"cell_id": 16125223527973836266,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 1172967512044477501,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 4244812262178743007,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{0 = 0, 0 = 0}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[0\\, = 0\\,, \\discretionary{}{}{}0\\, = 0\\,\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "substitute(ex, sol[0]);"
		},
		{
			"cell_id": 7353939443993816784,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 9953383820951286777,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 15642781551709841683,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "x A_{m} C^{m} + b D_{n p} G^{n p} = 0"
						}
					],
					"source": "\\begin{dmath*}{}x A_{m} C^{m}\\discretionary{}{}{}+b D_{n p} G^{n p} = 0\\,\\end{dmath*}"
				},
				{
					"cell_id": 12738663009888911183,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 12794083091240205511,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{-G^{n p} D_{n p} (C^{m})**(-1) (A_{m})**(-1) b}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[-\\,G^{n p} D_{n p} {C^{m}}^{-\\,1} {A_{m}}^{-\\,1} b\\right]\\right]\\end{dmath*}"
				},
				{
					"cell_id": 2973711497616083395,
					"cell_origin": "server",
					"cell_type": "error",
					"source": "\\begin{verbatim}RuntimeError: Power with free indices not allowed.\n\nAt:\n  <string>(17): linsolve\n  Notebook Cell (Line 4): _ = linsolve(ex, Ex('x', False))\n\\end{verbatim}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:= x A_{m} C^{m} + b D_{n p} G^{n p} = 0;\nlinsolve(ex, $x$);"
		},
		{
			"cell_id": 10231998506255394040,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 5465144330139214481,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 13932574290516155813,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "x A_{m} C^{m} + b D_{n p} G^{n p} = 0"
						}
					],
					"source": "\\begin{dmath*}{}x A_{m} C^{m}+b D_{n p} G^{n p} = 0\\end{dmath*}"
				},
				{
					"cell_id": 4663387022186441696,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 13913668299812041980,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> -b D_{n p} G^{n p} (A_{m} C^{m})**(-1)}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow -b D_{n p} G^{n p} {\\left(A_{m} C^{m}\\right)}^{-1}\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:= x A_{m} C^{m} + b D_{n p} G^{n p} = 0;\nlinsolve(ex, $x$);"
		},
		{
			"cell_id": 15662243220303454349,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 17001975289188242795,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{nonlinsolve}{Solve a system of non-linear equations.}\n\nGiven an expression containing one or more linear equations, and an second expression containing\nthe variables to solve for, determine the solutions. Returns a substitution rule or a list of\nsubstitution rules for the variables that have been solved for."
				}
			],
			"hidden": true,
			"source": "\\algorithm{nonlinsolve}{Solve a system of non-linear equations.}\n\nGiven an expression containing one or more linear equations, and an second expression containing\nthe variables to solve for, determine the solutions. Returns a list of substitution rules for the \nvariables that have been solved for."
		},
		{
			"cell_id": 911768519859269492,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "from sympy.solvers.solveset import nonlinsolve as sympy_nonlinsolve\n\ndef nonlinsolve(exs, objs):\n   ret = $@(exs)$\n   obl = $@(objs)$\n   if ret.head()!=r\"\\comma\":\n      ret = $\\comma{ @(ret) }$\n   if obl.head()!=r\"\\comma\":\n      obl = $\\comma{ @(obl) }$\n   sb = SympyBridge(ret)\n   qq = sympy_nonlinsolve( sb.to_sympy(), objs._sympy_()) \n   sb.from_sympy( sympy_nonlinsolve( sb.to_sympy(), objs._sympy_() ) )\n   # The result is a list of solutions. Turn this into a list of\n   # rules.\n   nret = $\\comma{}$\n   for i in range(len(ret)):\n      tsol=$\\comma{}$\n      for v in range(len(obl)):\n         tmpv=obl[v]\n         tmps=ret[i][v]\n         tsol.top().append_child($ @(tmpv) -> @(tmps) $)\n      nret.top().append_child(tsol)\n   ret=nret\n   return ret"
		},
		{
			"cell_id": 4737965800086152437,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 17726577959155713331,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 16867347018516536039,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "(x)**2-1"
						}
					],
					"source": "\\begin{dmath*}{}{x}^{2\\,}\\discretionary{}{}{}-\\,1\\end{dmath*}"
				},
				{
					"cell_id": 7049263081588706730,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 14244270221802171944,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> -1}, {x -> 1}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow -\\,1\\right], \\discretionary{}{}{}\\left[x \\rightarrow 1\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:= x**2-1;\nsol=nonlinsolve(ex, $x$);"
		},
		{
			"cell_id": 9068678982032793579,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 1679926337173325181,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 183493805300469498,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "0"
						}
					],
					"source": "\\begin{dmath*}{}0\\,\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "substitute(ex, sol[0])\nsimplify(ex);"
		},
		{
			"cell_id": 14972222131526038404,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 10183612661385892278,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 7592274207501744189,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "(x)**2 + A_{m} B^{m} = 0"
						}
					],
					"source": "\\begin{dmath*}{}{x}^{2\\,}\\discretionary{}{}{}+A_{m} B^{m} = 0\\,\\end{dmath*}"
				},
				{
					"cell_id": 9508219180757457848,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 6700441174221915549,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> (-B^{m} A_{m})**( 1/2 )}, {x -> -(-B^{m} A_{m})**( 1/2 )}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow \\sqrt{-\\,B^{m} A_{m}}\\right], \\discretionary{}{}{}\\left[x \\rightarrow -\\,\\sqrt{-\\,B^{m} A_{m}}\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:= x**2 + A_{m} B^{m} = 0;\nsol=nonlinsolve(ex, $x$);"
		},
		{
			"cell_id": 3008341142464299938,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 18049567145713059104,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 877619584076577222,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{(x)**2-1 = 0, (y)**2-2 = 0}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[{x}^{2\\,}\\discretionary{}{}{}-\\,1 = 0\\,, \\discretionary{}{}{}{y}^{2\\,}\\discretionary{}{}{}-2\\, = 0\\,\\right]\\end{dmath*}"
				},
				{
					"cell_id": 17361915992502167480,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 5211272471867728713,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> -1, y -> 2**( 1/2 )}, {x -> 1, y -> 2**( 1/2 )}, {x -> -1, y -> -2**( 1/2 )}, {x -> 1, y -> -2**( 1/2 )}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow -\\,1, \\discretionary{}{}{}y \\rightarrow \\sqrt{2\\,}\\right], \\discretionary{}{}{}\\left[x \\rightarrow 1, \\discretionary{}{}{}y \\rightarrow \\sqrt{2\\,}\\right], \\discretionary{}{}{}\\left[x \\rightarrow -\\,1, \\discretionary{}{}{}y \\rightarrow -\\,\\sqrt{2\\,}\\right], \\discretionary{}{}{}\\left[x \\rightarrow 1, \\discretionary{}{}{}y \\rightarrow -\\,\\sqrt{2\\,}\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex:= { x**2 - 1 = 0, y**2 - 2 =0 }; \nnonlinsolve(ex, $x,y$);"
		},
		{
			"cell_id": 6913007854354215623,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11588338536455156616,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{solve}{Solve an equation or system of equations.}\n\nGiven an expression containing one or more equations, and an second expression containing\nthe variables to solve for, determine the solutions. Returns a list of substitution rules for the \nvariables that have been solved for."
				}
			],
			"hidden": true,
			"source": "\\algorithm{solve}{Solve an equation or system of equations.}\n\nGiven an expression containing one or more equations, and an second expression containing\nthe variables to solve for, determine the solutions. Returns a list of substitution rules for the \nvariables that have been solved for."
		},
		{
			"cell_id": 6666887454489559442,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "from sympy import solve as sympy_solve\n\ndef solve(exs, objs):\n   ret = $@(exs)$\n   obl = $@(objs)$\n   if ret.head()!=r\"\\comma\":\n      ret = $\\comma{ @(ret) }$\n   if obl.head()!=r\"\\comma\":\n      obl = $\\comma{ @(obl) }$\n   sb = SympyBridge(ret)\n   sb.from_sympy( sympy_solve( sb.to_sympy(), objs._sympy_()) )\n   # The result is a list of solutions. Turn this into a list of\n   # rules.\n   nret = $\\comma{}$\n   for i in range(len(ret)):\n      tsol=$\\comma{}$\n      for v in range(len(obl)):\n         tmpv=obl[v]\n         tmps=ret[i][v]\n         tsol.top().append_child($ @(tmpv) -> @(tmps) $)\n      nret.top().append_child(tsol)\n   ret=nret\n   return ret"
		},
		{
			"cell_id": 13789713952413725514,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 13932257768961801995,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 1522347131361413068,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "{{x -> -(y)**( 1/2 )}, {x -> (y)**( 1/2 )}}"
						}
					],
					"source": "\\begin{dmath*}{}\\left[\\left[x \\rightarrow -\\,\\sqrt{y}\\right], \\discretionary{}{}{}\\left[x \\rightarrow \\sqrt{y}\\right]\\right]\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "solve($x**2=y$, $x$);"
		},
		{
			"cell_id": 10348235580831042576,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"flags": {
		"hide_input_cells": false
	},
	"version": 1.0
}
