{
	"cell_id": 6806321452497212969,
	"cells": [
		{
			"cell_id": 1025456808033925757,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 15168816901646088639,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\package{cdb.sympy.calculus}{Use SymPy calculus functionality on Cadabra expressions.}\n\nA lot of functionality in SymPy can be used on Cadabra expressions, but in order to correctly\nconvert from and to the SymPy expression form, we need a bridge. This package contains such\nbridging fuctions, which will ensure that e.g. tensor indices are handled correctly when\nfed through SymPy's scalar algebra algorithms."
				}
			],
			"hidden": true,
			"source": "\\package{cdb.sympy.calculus}{Use SymPy calculus functionality on Cadabra expressions.}\n\nA lot of functionality in SymPy can be used on Cadabra expressions, but in order to correctly\nconvert from and to the SymPy expression form, we need a bridge. This package contains such\nbridging fuctions, which will ensure that e.g. tensor indices are handled correctly when\nfed through SymPy's scalar algebra algorithms."
		},
		{
			"cell_id": 13465434077161054101,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11839947054515140372,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{diff}{Differentiate an expression with respect to one or more variables.}\n\nThis function mimics the SymPy \\verb|diff| function, except that all expressions need\nto be Cadabra expressions. The function takes an expression and an arbitrary number\nof variables with respect to which to differentiate it."
				}
			],
			"hidden": true,
			"source": "\\algorithm{diff}{Differentiate an expression with respect to one or more variables.}\n\nThis function mimics the SymPy \\verb|diff| function, except that all expressions need\nto be Cadabra expressions. The function takes an expression and an arbitrary number\nof variables with respect to which to differentiate it."
		},
		{
			"cell_id": 3804610120254550473,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def diff(ex, *args):\n   ret = $@(ex)$\n   sb = SympyBridge(ret)\n   dvars = []\n   for arg in args:\n       sbtmp = SympyBridge(arg)\n       dvars.append( sbtmp.to_sympy() )\n   sb.from_sympy( sympy.diff( sb.to_sympy(), *dvars ) )\n   return ret"
		},
		{
			"cell_id": 12308609622224851480,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 13996360633394007671,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "A typical example, differentiating with respect to a single variable:"
				}
			],
			"hidden": true,
			"source": "A typical example, differentiating with respect to a single variable:"
		},
		{
			"cell_id": 1389897799554975903,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 10741333136404033680,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 10741176021733363837,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "\\cos(x) A_{\\mu}(x) + \\sin(x) \\partial_{x}(A_{\\mu}(x))"
						}
					],
					"source": "\\begin{dmath*}{}\\cos{x} A_{\\mu}\\left(x\\right)\\discretionary{}{}{}+\\sin{x} \\partial_{x}\\left(A_{\\mu}\\left(x\\right)\\right)\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "diff($\\sin(x) A_{\\mu}(x)$, $x$);"
		},
		{
			"cell_id": 549591636986061462,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 15761683789547886217,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 16581721455931262993,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "-\\sin(y) \\cos(x)"
						}
					],
					"source": "\\begin{dmath*}{}-\\,\\sin{y} \\cos{x}\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "diff($\\sin(x)\\cos(y)$, $x$, $y$);"
		},
		{
			"cell_id": 6234003092100779795,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 10150353556520051186,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{integrate}{Integrate a definite or indefinite integral.}\n\nThis function mimics the SymPy \\verb|integrate| function, except that all\nmathematical expressions need to be Cadabra expressions. Indefinite integration\nis done by passing an argument which is just an expression, while definite\nintegration is done by passing a tuple consisting of the integration variable,\nthe starting point and the end point."
				}
			],
			"hidden": true,
			"source": "\\algorithm{integrate}{Integrate a definite or indefinite integral.}\n\nThis function mimics the SymPy \\verb|integrate| function, except that all\nmathematical expressions need to be Cadabra expressions. Indefinite integration\nis done by passing an argument which is just an expression, while definite\nintegration is done by passing a tuple consisting of the integration variable,\nthe starting point and the end point."
		},
		{
			"cell_id": 15467993639628642890,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def integrate(ex1, *args):\n   ret = ex1.copy()\n   sb = SympyBridge(ret)\n   iranges = []\n   for arg in args:\n      if isinstance(arg, tuple):\n          # print(arg)\n          tmp0 = SympyBridge(arg[0]).to_sympy()\n          tmp1 = SympyBridge(arg[1]).to_sympy() if isinstance(arg[1], Ex) else arg[1]\n          tmp2 = SympyBridge(arg[2]).to_sympy() if isinstance(arg[2], Ex) else arg[2]\n          tpl = ( tmp0, tmp1, tmp2 )\n          iranges.append(tpl)\n      else:\n         tmp = SympyBridge(arg).to_sympy()\n         iranges.append( tmp )\n      \n   # print(sb.to_sympy())\n   # print(iranges)\n   sb.from_sympy( sympy.integrate( sb.to_sympy(), *iranges) )\n   return ret"
		},
		{
			"cell_id": 3801120048138997797,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 13060402605556641930,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "The following is an example of a definite integration:"
				}
			],
			"hidden": true,
			"source": "The following is an example of a definite integration:"
		},
		{
			"cell_id": 14525293143474443676,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 3923950039630300427,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 17106994130473408151,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": " 9/2 "
						}
					],
					"source": "\\begin{dmath*}{}\\frac{9}{2}\\,\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "integrate($x**2 y$, ($x$, 0, 3), ($y$, 0, 1) );"
		},
		{
			"cell_id": 2354178610469859185,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 17727729829154494875,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "Here is an indefinite integration:"
				}
			],
			"hidden": true,
			"source": "Here is an indefinite integration:"
		},
		{
			"cell_id": 2273072162227922772,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 400193765716168062,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 11825667400944765124,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": " 1/3 (x)**3 y"
						}
					],
					"source": "\\begin{dmath*}{}\\frac{1}{3}\\,{x}^{3\\,} y\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "integrate($x**2$, $x$, $y$);"
		},
		{
			"cell_id": 14437617558705092816,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 9935958107203452733,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "Mixed versions are also possible:"
				}
			],
			"hidden": true,
			"source": "Mixed versions are also possible:"
		},
		{
			"cell_id": 6556436360376410122,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 13729551692473219465,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 1123541809795391727,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": " 1/4 (y)**2"
						}
					],
					"source": "\\begin{dmath*}{}\\frac{1}{4}\\,{y}^{2\\,}\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "integrate($x y$, ($x$, 0, 1), $y$);"
		},
		{
			"cell_id": 15496749977354253222,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11565454487843639642,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{limit}{Take the limit of an expression.}\n\nThis function mimics the SymPy \\verb|limit| function, except that all\nmathematical expressions need to be Cadabra expressions."
				}
			],
			"hidden": true,
			"source": "\\algorithm{limit}{Take the limit of an expression.}\n\nThis function mimics the SymPy \\verb|limit| function, except that all\nmathematical expressions need to be Cadabra expressions."
		},
		{
			"cell_id": 14261374590043911759,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def limit(ex, v, loc, *args):\n   ret = $@(ex)$\n   sbex  = SympyBridge(ret)\n   sbvar = SympyBridge(v).to_sympy()\n   sbloc = SympyBridge(loc).to_sympy() if isinstance(loc, Ex) else loc\n   sbex.from_sympy( sympy.limit( sbex.to_sympy(), sbvar, sbloc ) )\n   return ret"
		},
		{
			"cell_id": 15671206733202710229,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 3270259090712891077,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 9414493474589972675,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "1"
						}
					],
					"source": "\\begin{dmath*}{}1\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "limit($\\sin(x)/x$, $x$, 0);"
		},
		{
			"cell_id": 4403018984250840411,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 11512538112824887976,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{series}{Construct a Taylor series.}\n\nThis function mimics the SymPy \\verb|series| function, except that all\nmathematical expressions need to be Cadabra expressions."
				}
			],
			"hidden": true,
			"source": "\\algorithm{series}{Construct a Taylor series.}\n\nThis function mimics the SymPy \\verb|series| function, except that all\nmathematical expressions need to be Cadabra expressions."
		},
		{
			"cell_id": 1152336426546868041,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def series(ex, v, loc, order_, *args):\n   ret = $@(ex)$\n   sbex  = SympyBridge(ret)\n   sbvar = SympyBridge(v).to_sympy()\n   sbloc = SympyBridge(loc).to_sympy() if isinstance(loc, Ex) else loc\n   tmp = sympy.series( sbex.to_sympy(), sbvar, sbloc, order_ )\n   #tmp = tmp.replace(\"O(\", r\"\\bigO(\")\n   sbex.from_sympy( tmp )\n   return ret"
		},
		{
			"cell_id": 796023660136979964,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 16012079193316282695,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 1666930631384807356,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "1 -  1/6 (x)**2 +  1/120 (x)**4 -  1/5040 (x)**6 + \\bigO((x)**8)"
						}
					],
					"source": "\\begin{dmath*}{}1\\discretionary{}{}{} - \\frac{1}{6}\\,{x}^{2\\,}\\discretionary{}{}{}+\\frac{1}{120}\\,{x}^{4\\,}\\discretionary{}{}{} - \\frac{1}{5040}\\,{x}^{6\\,}\\discretionary{}{}{}+\\bigO\\left({x}^{8\\,}\\right)\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "q=series($\\sin(x)/x$, $x$, 0, 8);"
		},
		{
			"cell_id": 12877610158835516880,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 16429600809897384787,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 4370193819508955020,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "1 -  1/6 (x)**2 +  1/120 (x)**4 -  1/5040 (x)**6"
						}
					],
					"source": "\\begin{dmath*}{}1\\discretionary{}{}{} - \\frac{1}{6}\\,{x}^{2\\,}\\discretionary{}{}{}+\\frac{1}{120}\\,{x}^{4\\,}\\discretionary{}{}{} - \\frac{1}{5040}\\,{x}^{6\\,}\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "substitute(q, $\\bigO(A??) ->0$);"
		},
		{
			"cell_id": 6061726248509003999,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 3476155041445637448,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 83988254890014517,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": " 1/2 2**( 1/2 ) -  1/2 (x -  1/4 \\pi) 2**( 1/2 ) + \\bigO((x -  1/4 \\pi)**2)"
						}
					],
					"source": "\\begin{dmath*}{}\\frac{1}{2}\\,\\sqrt{2\\,}\\discretionary{}{}{} - \\frac{1}{2}\\,\\left(x\\discretionary{}{}{} - \\frac{1}{4}\\,\\pi\\right) \\sqrt{2\\,}\\discretionary{}{}{}+\\bigO\\left({\\left(x\\discretionary{}{}{} - \\frac{1}{4}\\,\\pi\\right)}^{2\\,}\\right)\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "series($\\cos(x)$, $x$, $\\pi/4$, 2);"
		},
		{
			"cell_id": 16349293761953373413,
			"cell_origin": "client",
			"cell_type": "latex",
			"cells": [
				{
					"cell_id": 10700541688820127695,
					"cell_origin": "client",
					"cell_type": "latex_view",
					"source": "\\algorithm{factor}{Factorise an expression}\n\nThis function mimics the SymPy \\verb|factor| function, except that the argument has to be a Cadabra expression."
				}
			],
			"hidden": true,
			"source": "\\algorithm{factor}{Factorise an expression}\n\nThis function mimics the SymPy \\verb|factor| function, except that the argument has to be a Cadabra expression."
		},
		{
			"cell_id": 17538488045608728761,
			"cell_origin": "client",
			"cell_type": "input",
			"source": "def factor(ex):\n   ret = $@(ex)$\n   sbex  = SympyBridge(ret)\n   tmp = sympy.factor( sbex.to_sympy() )\n   sbex.from_sympy( tmp )\n   return ret"
		},
		{
			"cell_id": 7561547917241467470,
			"cell_origin": "client",
			"cell_type": "input",
			"cells": [
				{
					"cell_id": 5406323791023273832,
					"cell_origin": "server",
					"cell_type": "latex_view",
					"cells": [
						{
							"cell_id": 1855448709790499107,
							"cell_origin": "server",
							"cell_type": "input_form",
							"source": "(x + 1) x"
						}
					],
					"source": "\\begin{dmath*}{}\\left(x\\discretionary{}{}{}+1\\right) x\\end{dmath*}"
				}
			],
			"ignore_on_import": true,
			"source": "ex = factor($ x**2 + x $);"
		},
		{
			"cell_id": 16786632068897082656,
			"cell_origin": "client",
			"cell_type": "input",
			"source": ""
		}
	],
	"description": "Cadabra JSON notebook format",
	"flags": {
		"hide_input_cells": false
	},
	"version": 1.0
}
